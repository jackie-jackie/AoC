(load "../../../common/lisp/util.lisp")

(defun valid-field (field)
  (let ((key (car field))
        (value (cadr field)))
    (cond
      ((string= key "byr")
       (multiple-value-bind
         (num len)
         (parse-integer value :junk-allowed t)
         (and num (= (length value) len) (>= num 1920) (<= num 2002))
         ))
      ((string= key "iyr")
       (multiple-value-bind
         (num len)
         (parse-integer value :junk-allowed t)
         (and num (= (length value) len) (>= num 2010) (<= num 2020))
         ))
      ((string= key "eyr")
       (multiple-value-bind
         (num len)
         (parse-integer value :junk-allowed t)
         (and num (= (length value) len) (>= num 2020) (<= num 2030))
         ))
      ((string= key "hgt")
       (multiple-value-bind
         (num len)
         (parse-integer value :junk-allowed t)
         (or (and num (string= (subseq value len) "cm") (>= num 150) (<= num 193))
             (and num (string= (subseq value len) "in") (>= num 59) (<= num 76))
             )
         ))
      ((string= key "hcl")
       (and (= (length value) 7)
            (char= (aref value 0) #\#)
            (every (lambda (c)
                     (or (and (char>= c #\0) (char<= c #\9))
                         (and (char>= c #\a) (char<= c #\f)))
                     )
                   (subseq value 1))))
      ((string= key "ecl")
       (some (lambda (color) (string= color value))
             '("amb" "blu" "brn" "gry" "grn" "hzl" "oth")))
      ((string= key "pid")
       (multiple-value-bind
         (num len)
         (parse-integer value :junk-allowed t)
         (declare (ignore num))
         (= (length value) len 9)
         ))
      )
    )
  )

(let ((passports (loop for passport = (parse-input :pre (lambda (line)
                                                          (split-sequence #\  line)
                                                          )
                                                   :until "")
                       while passport
                       collect (remove-if (lambda (field)
                                            (string= (car field) "cid")
                                            )
                                          (mapcar (lambda (field)
                                                    (split-sequence #\: field)
                                                    )
                                                  (flatten passport))))))
  (format t "~D~&" (loop for p in passports
                         count (= (length p) 7)))
  (format t "~D~&" (loop for p in passports
                         count (and (= (length p) 7)
                                    (every #'valid-field p))))
  )
